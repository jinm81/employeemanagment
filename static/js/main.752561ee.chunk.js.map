{"version":3,"sources":["components/Header.js","util/API.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onChange","handleInputChange","placeholder","name","value","search","axios","get","Main","state","employees","api","then","result","console","log","data","results","setState","scope","this","filter","employee","first","toLowerCase","last","map","i","key","src","picture","thumbnail","email","Component","App","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gSAoCeA,MAlCf,SAAgBC,GACd,OACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BAC3C,0BAAMR,UAAU,4BACd,2BACEA,UAAU,uBACVS,SAAUV,EAAMW,kBAChBR,KAAK,SACLS,YAAY,SACZJ,aAAW,SACXK,KAAK,SACLC,MAAOd,EAAMe,a,iBCvBV,EACL,WACN,OAAOC,IAAMC,IAND,0CCqDDC,G,wDAlDb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXC,UAAW,IAHI,E,gEAME,IAAD,OAClBC,IAAaC,MAAK,SAACC,GACjBC,QAAQC,IAAIF,EAAOG,KAAKC,SACxB,EAAKC,SAAS,CAAER,UAAWG,EAAOG,KAAKC,UAAW,kBAChDH,QAAQC,IAAI,EAAKN,e,+BAKb,IAAD,OACP,OACE,2BAAOlB,UAAU,SACf,2BAAOA,UAAU,cACf,4BACE,wBAAI4B,MAAM,QACV,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGC,KAAKX,MAAMC,UACTW,QACC,SAACC,GAAD,OAGS,IAFP,UAAGA,EAASnB,KAAKoB,MAAMC,cAAvB,YAAwCF,EAASnB,KAAKsB,KAAKD,eAAgBnB,OACzE,EAAKf,MAAMe,OAAOmB,kBAGvBE,KAAI,SAACJ,EAAUK,GAAX,OACH,wBAAIC,IAAKD,GACP,wBAAIR,MAAM,OACR,yBAAKU,IAAKP,EAASQ,QAAQC,aAE7B,4BAAKT,EAASnB,KAAKoB,OACnB,4BAAKD,EAASnB,KAAKsB,MACnB,4BAAKH,EAASU,iB,GA1CXC,cC+BJC,G,wDA5Bb,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAMRW,kBAAoB,SAACkC,GACnB,IAAM/B,EAAQ+B,EAAMC,OAAOhC,MACrBD,EAAOgC,EAAMC,OAAOjC,KAC1B,EAAKe,SAAL,eAEKf,EAAOC,IAEV,kBAAMU,QAAQC,IAAI,EAAKN,WAZzB,EAAKA,MAAQ,CACXJ,OAAQ,IAHO,E,qDAkBjB,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAQU,kBAAmBmB,KAAKnB,kBAAmBI,OAAUe,KAAKX,MAAMJ,SAExE,kBAAC,EAAD,CAAMA,OAAUe,KAAKX,MAAMJ,c,GAvBjB4B,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.752561ee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar\r\n      </a>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <form className=\"form-inline my-2 my-lg-0\">\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            onChange={props.handleInputChange}\r\n            type=\"search\"\r\n            placeholder=\"Search\"\r\n            aria-label=\"Search\"\r\n            name=\"search\"\r\n            value={props.search}\r\n          />\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=50\";\r\n\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport api from \"../util/API\";\r\nimport sort from \"../components/sort\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      employees: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    api.search().then((result) => {\r\n      console.log(result.data.results);\r\n      this.setState({ employees: result.data.results }, () =>\r\n        console.log(this.state)\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table className=\"table\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\">First</th>\r\n            <th scope=\"col\">Last</th>\r\n            <th scope=\"col\">Email</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.state.employees\r\n            .filter(\r\n              (employee) =>\r\n                `${employee.name.first.toLowerCase()} ${employee.name.last.toLowerCase()}`.search(\r\n                  this.props.search.toLowerCase()\r\n                ) !== -1\r\n            )\r\n            .map((employee, i) => (\r\n              <tr key={i}>\r\n                <th scope=\"row\">\r\n                  <img src={employee.picture.thumbnail}></img>\r\n                </th>\r\n                <td>{employee.name.first}</td>\r\n                <td>{employee.name.last}</td>\r\n                <td>{employee.email}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n    };\n  }\n\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState(\n      {\n        [name]: value,\n      },\n      () => console.log(this.state)\n    );\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Header handleInputChange={this.handleInputChange} search = {this.state.search}/>\n\n        <Main search = {this.state.search} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}